#!/bin/bash

MAN='# Usage: devlog [flag] [sub-flags] <description_or_command>
# Examples:
#   devlog -i sudo apt install curl                  # Install command (executes and logs)
#   devlog -b make build                             # Build command (executes and logs)
#   devlog -r ./myapp                                # Run command (executes and logs)
#   devlog -c git config --global user.name "Name"   # Config command (executes and logs)
#   devlog -n "This is a comment or note"            # Add comment
#   devlog -p -create "Implement homepage layout" -id "homepage"  # Create progress item with custom ID and timestamp
#   devlog -p -update "Updated homepage styles" -id "homepage"    # Update progress item by ID
#   devlog -p -remove -id "homepage"                 # Remove progress item by ID
#   devlog -t -create "Fix bug in login"             # Create TODO item with auto ID and timestamp
#   devlog -t -complete -id "item1"                  # Move TODO item to Progress (mark as completed)
#   devlog -t -create "Fix homepage styles" -id "homepage"    # Update progress item by ID
#   devlog -<> -print                                # Print whole section to terminal
#   devlog -<> -print -id "itemid"                   # Print category item by ID
'


# Default files
LOG_FILE="devlog.md"
PROG_FILE="progress.md"
TEMP_FILE="temp.md"  # Using a generic temp file name

# Initialize devlog.md if not exists
if [ ! -f "$LOG_FILE" ]; then
    TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
    CURRENT_DIR=$(basename "$(pwd)")
    echo "# Devlog for $CURRENT_DIR" > "$LOG_FILE"
    echo "A log of development commands and notes. Created on $TIMESTAMP." >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
    echo "## Comments" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
    echo "## Config" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
    echo "## Install" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
fi

# Initialize progress.md if not exists
if [ ! -f "$PROG_FILE" ]; then
    TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
    CURRENT_DIR=$(basename "$(pwd)")
    echo "# Progress for $CURRENT_DIR" > "$PROG_FILE"
    echo "Progress log of project development." >> "$PROG_FILE"
    echo "" >> "$PROG_FILE"
    echo "## Progress" >> "$PROG_FILE"
    echo "" >> "$PROG_FILE"
    echo "## TODO's" >> "$PROG_FILE"
    echo "" >> "$PROG_FILE"
fi

# Parse arguments (handle multiple flags)
FLAG=""
SUB_ACTION=""
ID=""
INPUT=""
TARGET_FILE="$LOG_FILE"
SECTION=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        -i|-c|-b|-r|-n|-p|-t)
            FLAG="$1"
            ;;
        -create|-update|-remove|-complete|-print)
            SUB_ACTION="$1"
            ;;
        -id)
            shift
            ID="$1"
            ;;
        *)
            INPUT="$INPUT $1"  # Collect remaining as input/description
            ;;
    esac
    shift
done
INPUT="${INPUT#" "}"  # Trim leading space



#
#
# Printing 
#
#

if [[ $INPUT == "man" || $INPUT == "--help" ]]; then
    echo -e "$MAN"
    exit 0
fi



if [[ $SUB_ACTION == "-print" ]]; then
    if [[ -z "$ID" ]]; then
        # Print whole section
        case "$FLAG" in
            -i) SECTION="Install";;
            -c) SECTION="Config";;
            -b) SECTION="Build";;
            -r) SECTION="Run";;
            -n) SECTION="Comments";;
            -p) SECTION="Progress"; TARGET_FILE="$PROG_FILE";;
            -t) SECTION="TODO's"; TARGET_FILE="$PROG_FILE";;
            *)
                echo "Error: Unknown flag '$FLAG'. Supported: -i (install), -c (config), -b (build), -r (run), -n (comments), -p (progress), -t (todo)."
                exit 1
                ;;
        esac
        echo "Printing section: $SECTION"
        awk -v section="## $SECTION" '
        {
            if ($0 == section) {
                print $0
                in_section = 1
            } else if (in_section && $0 ~ /^## /) {
                in_section = 0
            } else if (in_section) {
                print $0
            }
        }' "$TARGET_FILE"
        exit 0
    else 
        # Print specific item by ID
        case "$FLAG" in
            -p) SECTION="Progress"; TARGET_FILE="$PROG_FILE";;
            -t) SECTION="TODO's"; TARGET_FILE="$PROG_FILE";;
            *)
                echo "Error: -print with -id only supported for -p (progress) and -t (todo)."
                exit 1
                ;;
        esac
        
        echo "Printing item with ID: $ID in section: $SECTION"
        ITEM=$(awk -v section="## $SECTION" -v id="$ID" '
        {
            if ($0 == section) {
                in_section = 1
            } else if (in_section && $0 ~ /^## /) {
                in_section = 0
            } else if (in_section && $0 ~ "- \\[" id "\\]") {
                print $0
            }
        }' "$TARGET_FILE")
        if [[ -z "$ITEM" ]]; then
            echo "Error: Item with ID '$ID' not found in section '$SECTION'."
            exit 1
        else
            echo "$ITEM"
        fi
        exit 0
    fi
fi



# Ensure input was provided for actions that need it
if [[ -z "$INPUT" && "$SUB_ACTION" =~ ^(-create|-update)$ ]]; then
    echo "Error: No description provided."
    exit 1
fi

# Determine section, target file, and behavior based on flag
case "$FLAG" in
    -i)
        SECTION="Install"
        TARGET_FILE="$LOG_FILE"
        echo "Executing: $INPUT"
        eval "$INPUT"
        EXIT_STATUS=$?
        NEW_ENTRY="\n\`\`\`bash\n$INPUT\n\`\`\`\n"
        ;;
    -c)  
        SECTION="Config"
        TARGET_FILE="$LOG_FILE"
        echo "Executing: $INPUT"
        eval "$INPUT"
        EXIT_STATUS=$?
        NEW_ENTRY="\n\`\`\`bash\n$INPUT\n\`\`\`\n"
        ;;
    -b)
        SECTION="Build"
        TARGET_FILE="$LOG_FILE"
        echo "Executing: $INPUT"
        eval "$INPUT"
        EXIT_STATUS=$?
        NEW_ENTRY="\n\`\`\`bash\n$INPUT\n\`\`\`\n"
        ;;
    -r)
        SECTION="Run"
        TARGET_FILE="$LOG_FILE"
        echo "Executing: $INPUT"
        eval "$INPUT"
        EXIT_STATUS=$?
        NEW_ENTRY="\n\`\`\`bash\n$INPUT\n\`\`\`\n"
        ;;
    -n)
        SECTION="Comments"
        TARGET_FILE="$LOG_FILE"
        NEW_ENTRY="\n- $INPUT\n"
        ;;
    -p|-t)
        if [ "$FLAG" = "-p" ]; then
            SECTION="Progress"
        else
            SECTION="TODO's"
        fi
        TARGET_FILE="$PROG_FILE"

        TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")


        case "$SUB_ACTION" in
            -create)
                # Generate auto ID if not provided
                if [ -z "$ID" ]; then
                    # Count existing items in section for auto ID
                    ITEM_COUNT=$(awk "/^## $SECTION$/{f=1} f==1 && /^\[/ {count++} /^## / {f=0} END {print count}" "$TARGET_FILE")
                    ID="item$((ITEM_COUNT + 1))"
                fi
                NEW_ENTRY="- $INPUT | $TIMESTAMP"

                # Use awk to append (as before)
                awk -v section="## $SECTION" -v new_entry="$NEW_ENTRY" -v id="$ID" '
                {
                    lines[NR] = $0
                }
                END {
                    section_line = -1
                    for (i = 1; i <= NR; i++) {
                        if (lines[i] == section) { section_line = i; break; }
                    }
                    if (section_line == -1) {
                        for (i = 1; i <= NR; i++) print lines[i]
                        print "\n" section
                        print "" 
                        print "[" id "]"
                        print "\n" new_entry "\n"
                        print "---"
                    } else {
                        end_line = NR + 1
                        for (i = section_line + 1; i <= NR; i++) {
                            if (lines[i] ~ /^## /) { end_line = i; break; }
                        }
                        for (i = 1; i < end_line; i++) print lines[i]
                        print "" 
                        print "[" id "]"
                        print "\n" new_entry "\n"
                        print "---"
                        for (i = end_line; i <= NR; i++) print lines[i]
                    }
                }' "$TARGET_FILE" > "$TEMP_FILE"
                mv "$TEMP_FILE" "$TARGET_FILE"
                echo "Item created in $TARGET_FILE under '$SECTION' with ID '$ID'."
                exit 0  # Exit after handling
                ;;

            -update)
                if [ -z "$ID" ]; then echo "Error: -id required for update."; exit 1; fi
                # Use awk to find the multi-line block, locate the --- separator, and insert the update above it
                awk -v section="## $SECTION" -v id="$ID" -v timestamp="$TIMESTAMP" -v new_content="$INPUT" '
                {
                    lines[NR] = $0  # Store all lines
                }
                END {
                    section_start = -1
                    block_start = -1
                    block_end = -1
                    separator_line = -1
                    
                    # Find section start
                    for (i = 1; i <= NR; i++) {
                        if (lines[i] == section) {
                            section_start = i
                            break
                        }
                    }
                    if (section_start == -1) {
                        print "Error: Section \"" section "\" not found" > "/dev/stderr"
                        exit 1
                    }
                    
                    # Find block start (line matching [ID])
                    for (i = section_start + 1; i <= NR; i++) {
                        if (lines[i] ~ "^\\[" id "\\]$") {
                            block_start = i
                            break
                        }
                        if (lines[i] ~ /^## /) break
                    }
                    if (block_start == -1) {
                        print "Error: Item \"" id "\" not found in section \"" section "\"" > "/dev/stderr"
                        exit 1
                    }
                    
                    # Find block end (before next [ or ## or EOF) and locate --- within the block
                    block_end = NR
                    for (i = block_start + 1; i <= NR; i++) {
                        if (lines[i] ~ /^\[/ || lines[i] ~ /^## /) {
                            block_end = i - 1
                            break
                        }
                        if (lines[i] ~ /^---$/) {
                            separator_line = i
                        }
                    }
                    
                    # If no --- found, use block_end as insertion point
                    insert_at = (separator_line > 0) ? separator_line : block_end + 1
                    
                    # Print everything up to just before insertion point
                    for (i = 1; i < insert_at; i++) print lines[i]
                    
                    # Insert the formatted update
                    print "\n- " new_content " | " timestamp
                    
                    # Print from insertion point onward (including --- if present)
                    for (i = insert_at; i <= NR; i++) print lines[i]
                }' "$TARGET_FILE" > "$TEMP_FILE" || { echo "Error: Update failed."; exit 1; }
                mv "$TEMP_FILE" "$TARGET_FILE"
                echo "Item '$ID' updated in $TARGET_FILE under '$SECTION'."
                exit 0
                ;;
            -remove)
                if [ -z "$ID" ]; then echo "Error: -id required for remove."; exit 1; fi
                # Use awk to find the multi-line block and skip printing it
                awk -v section="## $SECTION" -v id="$ID" '
                {
                    lines[NR] = $0  # Store all lines
                }
                END {
                    section_start = -1
                    block_start = -1
                    block_end = -1
                    
                    # Find section start
                    for (i = 1; i <= NR; i++) {
                        if (lines[i] == section) {
                            section_start = i
                            break
                        }
                    }
                    if (section_start == -1) {
                        print "Error: Section \"" section "\" not found" > "/dev/stderr"
                        exit 1
                    }
                    
                    # Find block start (line matching [ID])
                    for (i = section_start + 1; i <= NR; i++) {
                        if (lines[i] ~ "^\\[" id "\\]$") {
                            block_start = i
                            break
                        }
                        if (lines[i] ~ /^## /) break
                    }
                    if (block_start == -1) {
                        print "Error: Item \"" id "\" not found in section \"" section "\"" > "/dev/stderr"
                        exit 1
                    }
                    
                    # Find block end (before next [ or ## or EOF)
                    block_end = NR
                    for (i = block_start + 1; i <= NR; i++) {
                        if (lines[i] ~ /^\[/ || lines[i] ~ /^## /) {
                            block_end = i - 1
                            break
                        }
                    }
                    
                    # Print everything BEFORE the block
                    for (i = 1; i < block_start; i++) print lines[i]
                    
                    # Skip the block (do nothing)
                    
                    # Print everything AFTER the block
                    for (i = block_end + 1; i <= NR; i++) print lines[i]
                }' "$TARGET_FILE" > "$TEMP_FILE" || { echo "Error: Remove failed."; exit 1; }
                mv "$TEMP_FILE" "$TARGET_FILE"
                echo "Item '$ID' removed from $TARGET_FILE under '$SECTION'."
                exit 0
                ;;

            -complete)
                if [ "$FLAG" != "-t" ]; then echo "Error: -complete only supported for -t (TODO's)."; exit 1; fi
                if [ -z "$ID" ]; then echo "Error: -id required for complete."; exit 1; fi
                # Extract the entire multi-line block for the item using awk
                ITEM=$(awk -v section="## TODO's" -v id="$ID" '
                {
                    lines[NR] = $0
                }
                END {
                    section_start = -1
                    block_start = -1
                    block_end = -1
                    
                    for (i = 1; i <= NR; i++) {
                        if (lines[i] == section) {
                            section_start = i
                            break
                        }
                    }
                    if (section_start == -1) exit 1
                    
                    for (i = section_start + 1; i <= NR; i++) {
                        if (lines[i] ~ "^\\[" id "\\]$") {
                            block_start = i
                            break
                        }
                        if (lines[i] ~ /^## /) break
                    }
                    if (block_start == -1) exit 1
                    
                    block_end = NR
                    for (i = block_start + 1; i <= NR; i++) {
                        if (lines[i] ~ /^\[/ || lines[i] ~ /^## /) {
                            block_end = i - 1
                            break
                        }
                    }
                    
                    for (i = block_start; i <= block_end; i++) print lines[i]
                }' "$TARGET_FILE")
                if [ -z "$ITEM" ]; then echo "Error: Item '$ID' not found in TODO's."; exit 1; fi
                # Append completion note to the last line of the block
                ITEM=$(echo "$ITEM")
                # Remove the block from TODO's using awk (skip printing the block)
                awk -v section="## TODO's" -v id="$ID" '
                {
                    lines[NR] = $0
                }
                END {
                    section_start = -1
                    block_start = -1
                    block_end = -1
                    
                    for (i = 1; i <= NR; i++) {
                        if (lines[i] == section) {
                            section_start = i
                            break
                        }
                    }
                    if (section_start == -1) exit 1
                    
                    for (i = section_start + 1; i <= NR; i++) {
                        if (lines[i] ~ "^\\[" id "\\]$") {
                            block_start = i
                            break
                        }
                        if (lines[i] ~ /^## /) break
                    }
                    if (block_start == -1) exit 1
                    
                    block_end = NR
                    for (i = block_start + 1; i <= NR; i++) {
                        if (lines[i] ~ /^\[/ || lines[i] ~ /^## /) {
                            block_end = i - 1
                            break
                        }
                    }
                    
                    # Print everything BEFORE the block
                    for (i = 1; i < block_start; i++) print lines[i]
                    
                    # Skip the block
                    
                    # Print everything AFTER the block
                    for (i = block_end + 1; i <= NR; i++) print lines[i]
                }' "$TARGET_FILE" > "$TEMP_FILE"
                mv "$TEMP_FILE" "$TARGET_FILE"
                # Append the full block to Progress using awk
                awk -v section="## Progress" -v new_entry="\n$ITEM" '
                {
                    lines[NR] = $0
                }
                END {
                    section_line = -1
                    for (i = 1; i <= NR; i++) {
                        if (lines[i] == section) { section_line = i; break; }
                    }
                    if (section_line == -1) {
                        for (i = 1; i <= NR; i++) print lines[i]
                        print "\n" section
                        print new_entry
                    } else {
                        end_line = NR + 1
                        for (i = section_line + 1; i <= NR; i++) {
                            if (lines[i] ~ /^## /) { end_line = i; break; }
                        }
                        for (i = 1; i < end_line; i++) print lines[i]
                        print new_entry
                        for (i = end_line; i <= NR; i++) print lines[i]
                    }
                }' "$TARGET_FILE" > "$TEMP_FILE"
                mv "$TEMP_FILE" "$TARGET_FILE"
                echo "Item '$ID' moved from TODO's to Progress in $TARGET_FILE."
                exit 0
                ;;




            *)
                # Fallback: Simple append if no sub-action
                NEW_ENTRY="\n- $INPUT\n"
                ;;
        esac
        ;;
    *)
        echo "Error: Unknown flag '$FLAG'. Supported: -i (install), -c (config), -b (build), -r (run), -n (comments), -p (progress), -t (todo)."
        exit 1
        ;;
esac


# Default append logic for non-special cases
awk -v section="## $SECTION" -v new_entry="$NEW_ENTRY" '
{
    lines[NR] = $0
}
END {
    section_line = -1
    for (i = 1; i <= NR; i++) {
        if (lines[i] == section) { section_line = i; break; }
    }
    if (section_line == -1) {
        for (i = 1; i <= NR; i++) print lines[i]
        print "\n" section
        print new_entry
    } else {
        end_line = NR + 1
        for (i = section_line + 1; i <= NR; i++) {
            if (lines[i] ~ /^## /) { end_line = i; break; }
        }
        for (i = 1; i < end_line; i++) print lines[i]
        print new_entry
        for (i = end_line; i <= NR; i++) print lines[i]
    }
}' "$TARGET_FILE" > "$TEMP_FILE"

# Replace the original file with the updated one
mv "$TEMP_FILE" "$TARGET_FILE" || { echo "Error: Failed to update $TARGET_FILE"; exit 1; }

echo "Entry appended to $TARGET_FILE under '$SECTION' section."

